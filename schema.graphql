### PROTOCOL TYPES ***

"""
Stores high-level variables for core protocol.
"""
type Core @entity {
  "Always set to 1"
  id: ID!
  "Array of all borrower vaults"
  vaults: [Vault!]
}

"""
Stores the collaterals deposited by the user, along with the debts.
"""
type Vault @entity {
  "User Ethereum address"
  id: ID!
  "Creation block timestamp"
  createTime: Int!
  "Debts owed by the vault owner"
  debts: [TokenBalance!]!
  "Collateral deposited"
  collaterals: [TokenBalance!]!
}

"""
Represents a token amount.
"""
type TokenBalance @entity {
  "Token contract address concatenated with user Ethereum address"
  id: ID!
  "Token contract address"
  token: Bytes!
  "Token amount"
  amount: BigDecimal!
}

"""
Stores high-level variables for the AMM.
"""
type Amm @entity {
  "Always set to 1"
  id: ID!
  "Array of all AMM pools"
  pools: [Pool!]!
}

"""
Stores the pool reserves, along with the swaps.
"""
type Pool @entity {
  "Pool contract address"
  id: ID!
  "The hToken maturity timestamp"
  maturity: BigInt!
  "Underlying token contract address"
  underlying: Bytes!
  "hToken contract address"
  hToken: Bytes!
  "The ratio between our native precision (18) and the underlying precision"
  underlyingPrecisionScalar: BigInt!
  "Pool reserve of underlying token"
  underlyingReserve: BigDecimal!
  "Pool reserve of hToken"
  hTokenReserve: BigDecimal!
  "Array of all AMM trades"
  swaps: [Swap!]!
}

type Swap @entity {
  "Sequential id"
  id: ID!
  "Account that sends token being sold"
  from: Bytes!
  "Account that receives token being bought"
  to: Bytes!
  "Underlying tokens swapped"
  underlyingAmount: BigDecimal!
  "hTokens swapped"
  hTokenAmount: BigDecimal!
  "Fee paid by user for swap"
  swapFee: BigDecimal!
  "Timestamp for when the swap happened"
  timestamp: Int!
}
